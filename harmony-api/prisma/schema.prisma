datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId    String    @id @default(uuid()) @map("user_id")
  username  String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  active    Boolean   @default(true)
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  follows   Follow[]  @relation("Following")
  followers Follow[]  @relation("Follower")

  @@map("user")
}

model Post {
  postId      String       @id @default(uuid()) @map("post_id")
  userId      String       @map("user_id")
  title       String
  postType    PostType     @map("post_type")
  content     String?
  rating      Decimal?
  songId      Int?         @map("song_id")
  albumId     Int?         @map("album_id")
  artistId    Int?         @map("artist_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  song        Song?        @relation(fields: [songId], references: [songId])
  album       Album?       @relation(fields: [albumId], references: [albumId])
  artist      Artist?      @relation(fields: [artistId], references: [artistId])
  user        User         @relation(fields: [userId], references: [userId])
  likes       Like[]
  comments    Comment[]
  pollOptions PollOption[]

  @@map("post")
}

model PollOption {
  postId String @id @map("post_id")
  option String
  poll   Post   @relation(fields: [postId], references: [postId])

  @@map("poll_option")
}

model Follow {
  followingId String   @map("following_id")
  followerId  String   @map("follower_id")
  createdAt   DateTime @default(now()) @map("created_at")
  following   User     @relation("Following", fields: [followingId], references: [userId])
  follower    User     @relation("Follower", fields: [followerId], references: [userId])

  @@id([followingId, followerId])
  @@map("follow")
}

model Like {
  userId String @map("user_id")
  postId String @map("post_id")
  user   User   @relation(fields: [userId], references: [userId])
  post   Post   @relation(fields: [postId], references: [postId])

  @@id([userId, postId])
  @@map("like")
}

model Comment {
  commentId String   @id @default(uuid()) @map("comment_id")
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  content   String?
  user      User     @relation(fields: [userId], references: [userId])
  post      Post     @relation(fields: [postId], references: [postId])

  @@map("comment")
}

model Artist {
  artistId             Int                    @id @map("artist_id")
  artistName           String                 @map("artist_name")
  beginYear            Int?                   @map("begin_date_year")
  end                  Int?                   @map("end_date_year")
  artistDescription    String?                @map("comment")
  artistCredits        ArtistCredit[]
  posts                Post[]
  Alias                Alias[]
  ArtistCreditRelation ArtistCreditRelation[]

  @@map("artist")
}

model Alias {
  artistId Int    @map("artist_id")
  alias    String @map("artist_alias")
  artist   Artist @relation(fields: [artistId], references: [artistId])

  @@id([artistId, alias])
  @@map("artist_alias")
}

model ArtistCreditRelation {
  artistCreditId Int          @map("artist_credit_id")
  artistId       Int          @map("artist_id")
  artistCredit   ArtistCredit @relation(fields: [artistCreditId], references: [artistCreditId])
  artist         Artist       @relation(fields: [artistId], references: [artistId])

  @@id([artistCreditId, artistId])
  @@map("artist_credit_relation")
}

model ArtistCredit {
  artistCreditId       Int                    @id @map("artist_credit_id")
  formattedName        String                 @map("formatted_name")
  artistCreditRelation ArtistCreditRelation[]
  songs                Song[]
  albums               Album[]
  Artist               Artist?                @relation(fields: [artistArtistId], references: [artistId])
  artistArtistId       Int?

  @@map("artist_credit")
}

model Album {
  albumId          Int          @id @map("album_id")
  albumName        String       @map("album_name")
  albumDescription String?      @map("comment")
  releaseGroupType String?      @map("release_group_type")
  artistCreditId   Int          @map("artist_credit_id")
  artistCredit     ArtistCredit @relation(fields: [artistCreditId], references: [artistCreditId])
  tracks           Track[]
  posts            Post[]

  @@map("album")
}

model Song {
  songId          Int          @id @map("song_id")
  artistCreditId  Int          @map("artist_credit_id")
  songName        String       @map("song_name")
  length          Int?         @map("length")
  songDescription String?      @map("comment")
  artistCredit    ArtistCredit @relation(fields: [artistCreditId], references: [artistCreditId])
  posts           Post[]
  tracks          Track[]

  @@map("song")
}

model Track {
  albumId  Int    @map("album_id")
  songId   Int    @map("song_id")
  position Int?   @map("position")
  album    Album? @relation(fields: [albumId], references: [albumId])
  song     Song?  @relation(fields: [songId], references: [songId])

  @@id([albumId, songId])
  @@map("track")
}

enum PostType {
  DISCUSSION
  POLL
  REVIEW
}
