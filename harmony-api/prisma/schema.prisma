datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId    String    @id @default(uuid()) @map("user_id")
  username  String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  active    Boolean?
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  artist    Artist[]
  follows   Follow[]  @relation("Following")
  followers Follow[]  @relation("Follower")
}

model Artist {
  artistId     String         @id @map("user_id")
  artistName   String         @unique @map("artist_name")
  artistAlias  String?        @map("artist_alias")
  user         User           @relation(fields: [artistId], references: [userId])
  albums       Album[]
  songs        Song[]
  publish      Publish[]
  relateArtist RelateArtist[]
}

model Post {
  postId           String         @id @default(uuid()) @map("post_id")
  userId           String         @map("user_id")
  title            String
  createdAt        DateTime       @default(now()) @map("created_at")
  user             User           @relation(fields: [userId], references: [userId])
  discussion       Discussion?    @relation(fields: [discussionPostId], references: [postId])
  review           Review?        @relation(fields: [reviewPostId], references: [postId])
  likes            Like[]
  comments         Comment[]
  pollPostId       String?        @map("poll_post_id")
  discussionPostId String?        @map("discussion_post_id")
  reviewPostId     String?        @map("review_post_id")
  relateTo         RelateTo[]
  relateSong       RelateSong[]
  relateAlbum      RelateAlbum[]
  relateArtist     RelateArtist[]
  pollOptions      PollOption[]
}

model PollOption {
  postId String @id @map("post_id")
  option String
  poll   Post   @relation(fields: [postId], references: [postId])
}

model Discussion {
  postId  String @id @map("post_id")
  content String
  post    Post[]
}

model Review {
  postId  String  @id @map("post_id")
  stars   Decimal
  content String
  post    Post[]
}

model Follow {
  followingId String   @map("following_id")
  followerId  String   @map("follower_id")
  createdAt   DateTime @default(now()) @map("created_at")
  following   User     @relation("Following", fields: [followingId], references: [userId])
  follower    User     @relation("Follower", fields: [followerId], references: [userId])

  @@id([followingId, followerId])
}

model Like {
  userId String @map("user_id")
  postId String @map("post_id")
  user   User   @relation(fields: [userId], references: [userId])
  post   Post   @relation(fields: [postId], references: [postId])

  @@id([userId, postId])
}

model Comment {
  commentId String   @id @default(uuid()) @map("comment_id")
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  content   String?
  user      User     @relation(fields: [userId], references: [userId])
  post      Post     @relation(fields: [postId], references: [postId])
}

model Album {
  albumId          String        @id @default(uuid()) @map("album_id")
  albumName        String        @unique @map("album_name")
  albumDescription String?       @map("album_description")
  createdAt        DateTime      @default(now()) @map("created_at")
  artists          Artist[]
  songs            Song[]
  publish          Publish[]
  relateAlbum      RelateAlbum[]
}

model Publish {
  albumId  String @id @map("album_id")
  artistId String @map("artist_id")
  album    Album  @relation(fields: [albumId], references: [albumId])
  artist   Artist @relation(fields: [artistId], references: [artistId])
}

model Song {
  songId          String       @id @default(uuid()) @map("song_id")
  artistId        String       @map("artist_id")
  songName        String       @map("song_name")
  songDescription String?      @map("song_description")
  createdAt       DateTime?    @map("created_at")
  albumId         String?      @map("album_id")
  artist          Artist       @relation(fields: [artistId], references: [artistId])
  album           Album?       @relation(fields: [albumId], references: [albumId])
  relateSong      RelateSong[]
}

// The RelateTo model is supposed to function like an abstract model
model RelateTo {
  postId String @id @map("post_id")
  post   Post   @relation(fields: [postId], references: [postId])
}

model RelateSong {
  songId String @map("song_id")
  postId String @map("post_id")
  song   Song   @relation(fields: [songId], references: [songId])
  post   Post   @relation(fields: [postId], references: [postId])

  @@id([postId, songId])
}

model RelateAlbum {
  albumId String @map("album_id")
  postId  String @map("post_id")
  album   Album  @relation(fields: [albumId], references: [albumId])
  post    Post   @relation(fields: [postId], references: [postId])

  @@id([postId, albumId])
}

model RelateArtist {
  artistId String @map("artist_id")
  postId   String @map("post_id")
  artist   Artist @relation(fields: [artistId], references: [artistId])
  post     Post   @relation(fields: [postId], references: [postId])

  @@id([postId, artistId])
}
