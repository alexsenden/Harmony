name: harmony-api-fe-cd

on:
  push:
    branches:
      ["main"]

jobs:
  deployment:
    name: Redeploy Services
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4    
        
      - name: SSH into azure VM and recreate existing backend
        uses: appleboy/ssh-action@v1.0.0
        env:
          usernameBackend: ${{ secrets.usernameBackend }}
          passwordBackend: ${{ secrets.passwordBackend }}
        with:
          host: ${{ secrets.azureHost2 }}
          username: ${{ secrets.usernameDeployment }}
          password: ${{ secrets.passwordDeployment }}
          script_stop: true
          port: 22
          envs: usernameBackend,passwordBackend
          script: |
              export usernameBackend="${{ env.usernameBackend }}"
              export passwordBackend="${{ env.passwordBackend }}"

              az vm delete --name backend --resource-group all_devs --yes 
              az vm create --resource-group all_devs --name backend --image Ubuntu2204 --admin-username "$usernameBackend" --admin-password "$passwordBackend" --authentication-type password --os-disk-size-gb 30 --nic-delete-option detach --os-disk-delete-option delete --size Standard_B1ms --zone 1 --location canadacentral --nics backend-177_z1
              # To make sure that it is created and can be accessed and that docker services complete building
              sleep 30s

      - name: SSH into backend VM, setup backend
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.azureHost1 }}
          username: ${{ secrets.usernameBackend }}
          password: ${{ secrets.passwordBackend }}
          script_stop: false
          port: 22
          script: |
              export DEBIAN_FRONTEND=noninteractive

              # Add Docker's official GPG key:
              sudo apt-get update
              sudo apt-get install ca-certificates curl gnupg --yes
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg

              # Add the repository to Apt sources:
              echo \
                "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
                
              # Install Docker
              sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin --yes

              sudo apt install nginx --yes

              # Set Nginx settings 
              cd /etc/nginx/sites-enabled
              sudo rm default

              sudo echo "    	
                server {
                  listen 80 default_server;
                  listen [::]:80 default_server;

                  server_name _;

                  location / {
                            proxy_http_version 1.1;
                            proxy_set_header X-Forwarded-For \$remote_addr;
                            proxy_set_header Host \$host;
                            proxy_pass http://localhost:8080; 
                  }
                }" | sudo tee -a default

              # Apply Nginx Settings
              sudo systemctl restart nginx
      
      - name: Redeploy docker containers
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.azureHost1 }}
          username: ${{ secrets.usernameBackend }}
          password: ${{ secrets.passwordBackend }}
          script_stop: true
          port: 22
          script: |
              sudo docker image pull aprovozin/harmony-api-cd:main
              sudo docker run --network=host --name backend -d -p 8081:8081 aprovozin/harmony-api-cd:main

              # let container api start
              sleep 10s

              sudo docker image pull aprovozin/harmony-fe-cd:main
              sudo docker run --name frontend -d -p 8080:8080 aprovozin/harmony-fe-cd:main

              # let container fe start
              sleep 10s

      - name: Set up logging and monitoring for (front-end / back-end) services
        uses: appleboy/ssh-action@v1.0.0
        env:
          hostBackend: ${{ secrets.azureHost1 }}
          grafanaAPIkey: ${{ secrets.grafanaAPIkey }}
        with:
          host: ${{ secrets.azureHost1 }}
          username: ${{ secrets.usernameBackend }}
          password: ${{ secrets.passwordBackend }}
          script_stop: false
          port: 22
          envs: hostBackend,grafanaAPIkey
          script: |
              export grafanaAPIkey="${{ env.grafanaAPIkey }}"
              export hostBackend="${{ env.hostBackend }}"

              # Download grafana agent
              ARCH="amd64" GCLOUD_HOSTED_METRICS_URL="https://prometheus-prod-13-prod-us-east-0.grafana.net/api/prom/push" GCLOUD_HOSTED_METRICS_ID="1252941" GCLOUD_SCRAPE_INTERVAL="60s" GCLOUD_HOSTED_LOGS_URL="https://logs-prod-006.grafana.net/loki/api/v1/push" GCLOUD_HOSTED_LOGS_ID="725516" GCLOUD_RW_API_KEY="$grafanaAPIkey" /bin/sh -c "$(curl -fsSL https://storage.googleapis.com/cloud-onboarding/agent/scripts/grafanacloud-install.sh)"

              sudo usermod -a -G docker grafana-agent

              sudo cp /lib/systemd/system/grafana-agent.service /etc/systemd/system/grafana-agent.service

              cd /etc/systemd/system

              sudo sed -i 's/User=grafana-agent/User=root/' /etc/systemd/system/grafana-agent.service
              sudo systemctl daemon-reload
              sudo systemctl restart grafana-agent.service

              # Download config files from our git repo
              cd /etc
              sudo curl -O -L https://raw.githubusercontent.com/alexsenden/harmony/main/configurations/grafana_integration.yaml
              sudo curl -O -L https://raw.githubusercontent.com/alexsenden/harmony/main/configurations/grafana_logs.yaml

              # Insert config files data into generated base config file

              ed -s grafana-agent.yaml <<EOF
              /integrations:/r grafana_integration.yaml
              w
              q
              EOF

              ed -s grafana-agent.yaml <<EOF
              /scrape_configs:/r grafana_logs.yaml
              w
              q
              EOF

              sudo sed -i "s/<your-instance-name>/$hostBackend/g" grafana-agent.yaml
      
              sudo systemctl restart grafana-agent.service
